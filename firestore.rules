rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is the owner of a document
    function isOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.owner;
    }
    
    // Helper function to check if user has access to a document
    function hasAccess(resource) {
      return isAuthenticated() && 
        (request.auth.uid in resource.data.share || 
         request.auth.uid == resource.data.owner);
    }
    
    // User collection rules
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated();
      
      match /{path=**} {
        allow read, write: if isAuthenticated();
      }
    }
    
    // Document collection rules
    match /docs/{documentId} {
      // Allow reading if user is authenticated and has access
      allow read: if isAuthenticated() && 
        (resource == null || 
         request.auth.uid in resource.data.share || 
         request.auth.uid == resource.data.owner);
      
      // Allow creating if user is authenticated
      allow create: if isAuthenticated() && 
        request.resource.data.owner == request.auth.uid &&
        request.resource.data.share is list;
      
      // Allow updating if user has access
      allow update: if isAuthenticated() && 
        (resource == null || 
         request.auth.uid in resource.data.share || 
         request.auth.uid == resource.data.owner);
      
      // Allow deleting if user is the owner
      allow delete: if isAuthenticated() && 
        resource.data.owner == request.auth.uid;
    }
  }
} 